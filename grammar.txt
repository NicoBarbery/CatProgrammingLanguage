expr        : KEYWORD:VAR IDENTIFIER EQ expr
		    : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	: NOT comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE|) arith-expr)*
		
arith-expr	: term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor	    : (PLUS|MINUS) factor
		    : power

power	    : atom (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 	    : INT|FLOAT|STRING|IDENTIFIER
		    : LPAREN expr RPAREN
		    : list-expr
		    : mewIF-expr
		    : for-expr
			: while-expr
			: func-def

list-expr		: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr	    : KEYWORD:IF expr KEYWORD:mewTHEN expr
              (KEYWORD:mewELIF expr KEYWORD:mweTHEN expr)*
              (KEYWORD:mewELSE expr)?

for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
			  (KEYWORD:STEP expr)? KEYWORD:THEN expr

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN expr

func-def		: KEYWORD:mewFUN IDENTIFIER?
							LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
							ARROW expr