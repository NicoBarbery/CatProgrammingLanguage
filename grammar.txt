statements 	: NEWLINE* statement (NEWLINE+ statement)* NEWLINE* 

statement	:KEYWORD:RETURN expr?
			:KEYWORD:CONTINUE
			:KEYWORD:BREAK
			: expr

expr        : KEYWORD:VAR IDENTIFIER EQ expr
		    : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	: NOT comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE|) arith-expr)*
		
arith-expr	: term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor	    : (PLUS|MINUS) factor
		    : power

power	    : atom (POW factor)*

call		: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 	    : INT|FLOAT|STRING|IDENTIFIER
		    : LPAREN expr RPAREN
		    : list-expr
		    : mewIF-expr
		    : for-expr
			: while-expr
			: func-def

list-expr	: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr	 	: KEYWORD: mewIF expr KEYWORD: mewTHEN
				(statement if-expr-b|if-expr-c?)
			|	(NEWLINE statements KEYWORD: mewEND|if-expr-b|if-expr-c)

if-expr-b 	: KEYWORD: mewELIF expr KEYWORD: mewTHEN
				(statement if-expr-b|if-expr-c?)
			|	(NEWLINE statements KEYWORD: mewEND|if-expr-b|if-expr-c)

if-expr-c 	: KEYWORD: mewELSE
				statement
			|	(NEWLINE statements KEYWORD: mewEND)

for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
			  	(KEYWORD:STEP expr)? KEYWORD: mewTHEN 
			  	statement
			|	(NEWLINE statements KEYWORD: mewEND)

while-expr	: KEYWORD:WHILE expr KEYWORD: mewTHEN 
				statement
			|	(NEWLINE statements KEYWORD: mewEND)

func-def		: KEYWORD:mewFUN IDENTIFIER?
							LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
							(ARROW expr)
						|	(NEWLINE statements KEYWORD: mewEND)